@page "/auth/login"

@layout AuthLayout
@using PlannerApp.Shared.Models

@inject AuthenticationService authService
@inject NavigationManager navigationManager

<div class="row">
    <div class="col-12">
        <h2>Login to your account</h2>
        <EditForm Model="model" OnValidSubmit="LoginUser">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>Email</label>
                <RadzenTextBox @bind-Value="model.Email"></RadzenTextBox>

                <label>Password</label>
                <RadzenTextBox @bind-Value="model.Password"></RadzenTextBox>

                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login"
                              ButtonStyle="Radzen.ButtonStyle.Primary" Class="btn-block mr-2"
                              Disabled="isBusy" />
                <RadzenButton ButtonType="Radzen.ButtonType.Button" Text="Register"
                              ButtonStyle="Radzen.ButtonStyle.Secondary" Class="btn-block mr-2"
                              Disabled="isBusy" Click="GoToRegister"/>
            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {
    LoginRequest model = new LoginRequest();

    bool isBusy = false;
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    public async Task LoginUser()
    {
        //isBusy = true;
        //var result = await authService.RegisterUserAsync(model);
        //if (result.isSuccess)
        //{
        //    message = result.message;
        //    messageType = Models.AlertMessageType.Success;
        //}
        //else
        //{
        //    message = result.Errors.FirstOrDefault() ?? result.message;
        //    messageType = Models.AlertMessageType.Danger;
        //}


        //isBusy = false;

    }

    void GoToRegister()
    {
        navigationManager.NavigateTo("/auth/register"); 
    }
}
